openapi: 3.1.0
info:
  title: App Template API
  version: 1.0.0
  description: Template API specification - will be populated by workflow
servers:
  - url: /api/v1
    description: API version 1
paths:
  /users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /tickets:
    get:
      operationId: listTickets
      summary: List all tickets
      tags:
        - Tickets
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [open, in_progress, pending, resolved, closed]
        - name: priority
          in: query
          required: false
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: object
                required: [tickets, total]
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketResponse'
                  total:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
  /tickets/{id}:
    get:
      operationId: getTicket
      summary: Get ticket by ID with optional requester details
      tags:
        - Tickets
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: include
          in: query
          required: false
          schema:
            type: string
            enum: [requester]
          description: Include related entities (requester)
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDetailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}:
    get:
      operationId: getUser
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    RegisterUserRequest:
      type: object
      required: [email, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
    UserResponse:
      type: object
      required: [id, email, firstName, lastName, isActive, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TicketResponse:
      type: object
      required: [id, subject, status, priority, requesterId, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        subject:
          type: string
        status:
          type: string
          enum: [open, in_progress, pending, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        requesterId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TicketDetailResponse:
      type: object
      required: [id, subject, status, priority, requesterId, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        subject:
          type: string
        status:
          type: string
          enum: [open, in_progress, pending, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        requesterId:
          type: string
          format: uuid
        requester:
          $ref: '#/components/schemas/UserResponse'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        fieldErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict (concurrent update or duplicate)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnprocessableEntity:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
