#!/usr/bin/env node

/**
 * Generate TypeScript types from modular OpenAPI specifications
 * Usage: node scripts/generate-api-types.ts
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { writeFileSync, readFileSync } from 'fs';
import { load } from 'js-yaml';
import generateSchema, { astToString } from 'openapi-typescript';
import type { OpenAPI3 } from 'openapi-typescript';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const outputFile = join(__dirname, '../generated-types.d.ts');

const bannerComment = `/**
 * ‚ö†Ô∏è  AUTO-GENERATED FILE - DO NOT MODIFY ‚ö†Ô∏è
 *
 * This file contains TypeScript types generated from OpenAPI specifications.
 * Use these types for type-safe API development.
 */

`;

async function generateApiTypes() {
  try {
    console.log('üîß Loading OpenAPI spec from workflow-generated file...');

    // Load the OpenAPI spec generated by the workflow
    const openApiSpecPath = join(__dirname, '../openapi_spec.yaml');
    const yamlContent = readFileSync(openApiSpecPath, 'utf8');
    const openApiSpec = load(yamlContent) as OpenAPI3;
    console.log('‚úÖ Loaded workflow-generated OpenAPI spec');

    // Generate and write types
    console.log('üîß Generating TypeScript types...');
    const typescriptTypes = await generateSchema(openApiSpec);
    const typescriptTypesString = bannerComment + astToString(typescriptTypes);
    writeFileSync(outputFile, typescriptTypesString);

    console.log('‚úÖ API types generated successfully!');
    console.log(`üìÅ Output: ${outputFile}`);
    console.log(`üìä Generated from workflow OpenAPI specification`);
  } catch (error) {
    console.error('‚ùå Failed to generate API types:', (error as Error).message);
    process.exit(1);
  }
}

generateApiTypes();
